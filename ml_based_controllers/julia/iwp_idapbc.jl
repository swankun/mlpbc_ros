#!/usr/bin/env julia

using MLBasedESC
using LinearAlgebra
using RobotOS
@rosimport sensor_msgs.msg: JointState
@rosimport std_msgs.msg: Float64
rostypegen()
using .sensor_msgs.msg, .std_msgs.msg

const USE_J2 = false
const PARAMS = Float32[-0.1691812, 1.7829006, -0.92500097, 3.7090883, 1.5073189, 2.316453, -1.3074979, 0.78090286, -5.566865, 0.828852, 1.3931139, -0.5802084, -0.031245055, 0.9268852, 1.4129484, -0.55534744, 0.047173485, -0.012209095, -0.022970349, 0.028382044, -0.061917294, 0.022465512, -0.036288854, -0.020688789, 0.06104508, 0.029916137, -0.043283265, -0.020622928, 0.033696577, 0.043542713, -0.0052801534, -0.11347471, -0.6027174, 0.18818307, -0.20037302, 0.6970212, 0.7388469, 0.5450999, 0.17791606, 0.43579027, -0.4300048, -0.32407248, 0.73891044, 0.09988919, 0.032418713, 0.09145698, 0.038576078, -0.2552635, -0.031055605, 0.09969609, 0.14221644, 0.049691997, -0.15643547, 0.5071399, -0.36878666, 0.28801757, -0.4183662, 0.007050777, -0.030719135, -0.19395572, 0.16136502, 0.10124025, -0.00044016828, 0.55155224, -0.34020752, 0.15241301, -0.11285439, 0.02945765, -0.17167497, 0.11122173, -0.0007794047, -0.49056554, 0.014850781, -1.3952482, 0.7380726, -0.43667307, -0.44324398, 0.30676994, -0.8504138, -0.5086029, -0.37944344, -0.4524465, -0.06462508, 0.67062056, -0.023741659, -0.17999478, -0.10867192, -0.03654144, 0.54607624, 0.42909452, -0.6948574, -0.4388731, 0.5114529, 0.08737269, 0.14333881, 0.1599569, -0.18302643, 0.5371175, 0.012097579, -0.7705576, 0.106035255, 0.19319057, 0.2016667, 0.06550845, 0.098535895, -1.5320868, 1.2928544, -0.35149106, 0.019339444, 0.20521115, -0.7046862, -0.7173936, 0.1936042, 0.07218038, 0.024183376, -0.8111611, 0.46088207, 0.15093155, -0.5938028, 0.03517686, -0.15618996, -0.40766564, 0.6473858, 0.38077483, 0.33076152, 0.1448444, -0.2592156, 0.055441443, -0.36400676, 0.4981841, -0.042260744, -0.9448947, 0.2343112, -0.060176555, -0.5360481, 0.31714442, 0.003343461, -1.2595954, 1.0768595, 0.13298821, -0.35888192, 0.30187327, -0.28890565, -0.3702431, -0.39223498, 0.09449098, -0.3611778, 0.33008984, -0.436075, 0.13689278, 0.47119865, -0.33107078, -0.08476165, 0.47168404, -0.61977446, -0.099348, 0.3617757, -0.51667625, -0.16494195, -0.20657082, -0.37510496, -0.32446963, 0.18088052, -0.45562655, -0.20261154, 0.06264488, -0.5483231, -0.12034918, -0.3091936, 0.03561662, 0.6315216, -0.2169356, -0.037836537, 0.09533787, -0.27154437, -0.63478416, -0.311865, -0.5499995, -0.031359393, 0.6679278, -0.05942481, -0.2865347, 0.13319044, 0.13873588, -0.16656978, 2.303395, -1.3095156, -0.4352908, 0.1414169, -0.16969, 0.7568349, 0.62782025, 0.29049984, -0.22508647, -0.022423873, 0.2794693, 0.5263645, 0.34137505, 0.33568132, -0.29555333, 0.15723783, -0.43754894, 0.19547252, 0.28041625, 0.028851802, 0.38995746, -0.109112285, 0.31958994, -0.15436082, 0.299735, -0.41441113, -1.1982287, 0.22042936, 0.16832542, -0.546486, 0.46633586, -0.16613494, -0.12235428, 0.87211853, 0.24368517, -0.35715425, 0.3612557, -0.3392931, -0.35383406, -0.031984925, -0.05326704, -0.04308095, -0.3060943, 0.049609657, -0.3341462, 0.1455347, 0.19540696, 0.48779774, 0.021736393, -0.11534893, -0.06210523, -0.0054768547, 0.24699757, -0.016495578, 0.021375818, 0.18569604, 0.007954833, -0.3941944, -0.22131653, 0.17335735, 0.48294294, 0.3182439, 0.25916353, 0.61763954, 0.46751288, -0.09707567, -0.4574357, -0.051178433, -0.17956336, 0.13319372, -0.020626267, -0.05408728, -0.14872167, -0.027957397, -0.4047996, -0.14442264, -0.21246563, -0.014369149, -0.01323003, 0.44974884, -0.5677102, 0.1453346, 0.19177632, -0.30235547, 0.4666937, -0.092802, 0.13026236, -0.21674861, 0.4507047, 0.024952697, -0.12617691, -0.051828906, -0.32050142, 0.08188917, 0.27865183, -0.33149272, -0.6306194, 0.13955352, -0.08419647, -0.67264414, -0.07554934, -0.2227941, -0.49537686, 0.01604935, -0.022613216, 0.16621688, -0.025083352, -0.29934818, -0.42664582, 0.032287985, -0.11254746, 0.34078094, -0.100620866, -0.0026071519, -0.33264816, -0.12549765, 0.034289353, -0.012062496, 0.41533658, -0.47546756, 0.5015202, 0.4106333, -0.62244326, 0.037970938, 0.011547376, -0.39172724, 0.4486527, -0.15769832, 0.34998125, 0.5116787, -0.5932944, -0.05553289, -0.09071056, 0.064235054, 0.3473872, 0.40688154, -0.15003666, -0.25336546, 0.10667544, -0.6464363, -0.09592325, -0.046782933, 0.11637083, 0.0057905368, -0.43873537, 0.045834944, -0.10845015, 0.07935646, -0.36046746, 0.22733702, -0.14213985, 0.17114279, -0.066860974, -0.24896257, -0.49041256, 0.46759394, 0.17207694, -0.12034853, -0.36548546, -0.2810497, 0.06414393, -0.0020721937, 0.45599777, 0.41995975, -0.32088432, -0.9927675, -0.2704312, -0.47018614, 0.13345331, 0.42102423, 0.05133441, 0.33659032, -0.7951214, -0.087707326, -0.32140052, 0.0788565, -0.13294642, 0.59563303, -0.14260222, -0.0334344, 0.5848519, 0.012487788, -0.18893954, -0.2756637, 0.00958309, -0.70697564, 0.22580989, 0.055461746, 0.053862546, -0.013438129, 0.013189996, -0.014363147, 0.00011211958, -0.0037277734, -0.0027305994, 0.0005149451, 0.72373915, -0.06335514, 0.0005374937, -0.0014726376, 4.590318, 0.11103534, 0.038016636, -0.050313696, 0.0006551598, -0.11275655, -0.17735313, 0.0019163504, -0.0008613436, -0.00024349945, -0.00045907448, -0.00039382133, 0.00076026283, 0.00036119382, 1.5059876, -0.25093773, 0.29879522, -0.0035615806, 3.690109, -1.0228263, -0.01704045, 0.0011747311, -0.007951698, 0.037972625, 0.031849932, 0.0012249018, -0.016130572, 0.004552026, -0.00018758862, -0.00019278258, -0.000120405566, 0.0, 0.0]

function create_true_hamiltonian()
    I1 = 0.0455f0
    I2 = 0.00425f0
    m3 = 0.183f0*9.81f0
    mass_inv = inv(diagm(vcat(I1, I2)))
    pe(q) = m3*(cos(q[1]) - one(q[1]))
    # pe(q) = m3*(q[1] - one(q[1]))
    Hamiltonian(mass_inv, pe)
end

function input_jacobian(x)
    T = eltype(x)
    [-x[2] zero(T); x[1] zero(T); zero(T) -x[4]; zero(T) x[3]]
end

function create_learning_hamiltonian()
    massd_inv = PSDNeuralNetwork(Float32, 2, nin=2)
    # vd = NeuralNetwork(Float32, [4,128,128,1])
    vd = SOSPoly(2, 1:3)
    Hamiltonian(massd_inv, vd)
end

function create_ida_pbc_problem()
    input = vcat(-1.0f0,1.0f0)
    input_annihilator = hcat(1.0f0,1.0f0)
    ham = create_true_hamiltonian()
    hamd = create_learning_hamiltonian()
    if USE_J2
        J2 = InterconnectionMatrix(
            SkewSymNeuralNetwork(Float32, 2, nin=2),
            SkewSymNeuralNetwork(Float32, 2, nin=2)
        )
        return IDAPBCProblem(ham, hamd, input, input_annihilator, J2)
    else
        return IDAPBCProblem(ham, hamd, input, input_annihilator)
    end
end

function create_known_ida_pbc()
    I1 = 0.0455f0
    I2 = 0.00425f0
    m3 = 0.183f0*9.81f0
    a1 = 1.0f0
    a2 = -1.1f0
    a3 = 2.0f0
    k1 = 0.0001f0
    γ2 = -I1*(a2+a3)/(I2*(a1+a2))
    input = vcat(-1.0f0,1.0f0)
    input_annihilator = hcat(1.0f0,1.0f0)
    
    mass_inv = inv(diagm(vcat(I1, I2)))
    pe(q) = m3*(cos(q[1]) - one(q[1]))
    ham = Hamiltonian(mass_inv, pe)

    massd = [a1 a2; a2 a3]
    massd_inv = inv(massd)
    ϕ(z) = 0.5f0*k1*z^2
    z(q) = q[2] + γ2*q[1]
    ped(q) = I1*m3/(a1+a2)*cos(q[1]) + ϕ(z(q))

    hamd = Hamiltonian(massd_inv, ped)
    return IDAPBCProblem(ham, hamd, input, input_annihilator)
end


function update_state(msg::JointState, state::Vector)
    state[1] = msg.position[1]
    state[2] = msg.position[2]
    state[3] = msg.velocity[1]
    state[4] = msg.velocity[2]
end

function compute_control(x::Vector, swingup_controller::Function)
    q1, q2, q1dot, q2dot = x
    xbar = [sin(q1-pi), sin(q2), q1dot, q2dot]
    if (1+cos(q1)) < (1+cos(pi-pi/10)) && abs(q1dot) < 5.0
        K = [-7.409595362575457, -0.05000000000000429, -1.1791663255097424, -0.03665716263249201]
        return -dot(K,xbar)
    else
        I1 = 0.0455f0
        I2 = 0.00425f0
        M = diagm(vcat(I1, I2))
        # effort = swingup_controller(xbar[1:2], M*xbar[3:4])
        effort = swingup_controller([q1+pi, q2], M*xbar[3:4])
        return clamp(effort, -0.7f0, 0.7f0)
    end
end

function main()
    init_node("ida_pbc_controller")
    state = zeros(Float64,4)
    pub = Publisher{Float64Msg}("theta2_controller/command", queue_size=1)
    sub = Subscriber{JointState}("/joint_states", update_state, (state,), queue_size=1)
    prob = create_ida_pbc_problem()
    # prob = create_known_ida_pbc()
    θ = PARAMS
    u = controller(prob, θ, damping_gain=0.15f0)
    loop_rate = Rate(500.0)
    while !is_shutdown()
        header = std_msgs.msg.Header()
        header.stamp = RobotOS.now()
        # effort = u(state[1:2], M*state[3:4])
        # effort = clamp(effort, -1f0, 1f0)
        effort = compute_control(state, u)
        effort = clamp(effort, -0.8f0, 0.8f0)
        gear_ratio = 1.0
        eta = 0.95 # 0.88
        k_tau = 0.230    # N-m/a
        current = effort / gear_ratio / k_tau / eta
        cmd = Float64Msg(current)
        publish(pub, cmd)
        rossleep(loop_rate)
    end
    safe_shutdown_hack()
end

function safe_shutdown_hack()
    run(`rostopic pub -1 /theta2_controller/command std_msgs/Float64 "data: 0. "`, wait=false);
end
Base.atexit(safe_shutdown_hack)

if !isinteractive()
    main()
end
